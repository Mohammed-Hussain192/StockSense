<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>BSE Sensex Stocks | StockSense</title>
  <meta http-equiv="refresh" content="9">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
  <style>
    /* Previous styles remain the same */
    /* Add these new styles for filters */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      transition: background-color 0.5s ease, color 0.3s ease;
    }

    body {
      background-color: #0a0e17;
      color: #ffffff;
      overflow-x: hidden;
      min-height: 100vh;
    }

    body.light-mode {
      background-color: #f5f7fa;
      color: #333333;
    }

    /* Navbar Styles */
    .navbar {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      padding: 20px 5%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 1000;
      background-color: rgba(10, 14, 23, 0.8);
      backdrop-filter: blur(10px);
    }

    body.light-mode .navbar {
      background-color: rgba(245, 247, 250, 0.8);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .logo {
      font-size: 28px;
      font-weight: 700;
      color: #4fc3f7;
      text-decoration: none;
      display: flex;
      align-items: center;
    }

    body.light-mode .logo {
      color: #2a7de1;
    }

    .logo i {
      margin-right: 10px;
      color: #4fc3f7;
    }

    body.light-mode .logo i {
      color: #2a7de1;
    }

    .nav-links {
      display: flex;
      gap: 30px;
    }

    .nav-links a {
      color: #ffffff;
      text-decoration: none;
      font-weight: 500;
      font-size: 16px;
      transition: color 0.3s;
      position: relative;
    }

    body.light-mode .nav-links a {
      color: #333333;
    }

    .nav-links a:hover {
      color: #4fc3f7;
    }

    body.light-mode .nav-links a:hover {
      color: #2a7de1;
    }

    .nav-links a::after {
      content: '';
      position: absolute;
      width: 0;
      height: 2px;
      bottom: -5px;
      left: 0;
      background-color: #4fc3f7;
      transition: width 0.3s;
    }

    body.light-mode .nav-links a::after {
      background-color: #2a7de1;
    }

    .nav-links a:hover::after {
      width: 100%;
    }

    .auth-buttons {
      display: flex;
      gap: 15px;
      align-items: center;
    }

    .btn {
      padding: 10px 20px;
      border-radius: 5px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      border: none;
      font-size: 14px;
    }

    .btn-login {
      background-color: transparent;
      color: #ffffff;
      border: 1px solid #4fc3f7;
    }

    body.light-mode .btn-login {
      color: #333333;
      border: 1px solid #2a7de1;
    }

    .btn-login:hover {
      background-color: rgba(79, 195, 247, 0.1);
    }

    body.light-mode .btn-login:hover {
      background-color: rgba(42, 125, 225, 0.1);
    }

    .btn-register {
      background-color: #4fc3f7;
      color: #0a0e17;
    }

    body.light-mode .btn-register {
      background-color: #2a7de1;
      color: #ffffff;
    }

    .btn-register:hover {
      background-color: #3ab4e6;
      transform: translateY(-2px);
    }

    body.light-mode .btn-register:hover {
      background-color: #1a6bc7;
    }

    /* Theme Toggle */
    .theme-toggle {
      display: flex;
      align-items: center;
      margin-left: 20px;
      cursor: pointer;
    }

    .toggle-icon {
      font-size: 20px;
      margin-right: 8px;
      color: #4fc3f7;
    }

    body.light-mode .toggle-icon {
      color: #2a7de1;
    }

    .toggle-text {
      font-size: 14px;
      font-weight: 500;
    }

    /* Main Content */
    .main-content {
      padding: 120px 5% 50px;
      min-height: 100vh;
    }

    .page-title {
      font-size: 2.5rem;
      font-weight: 800;
      margin-bottom: 2rem;
      text-align: center;
      background: linear-gradient(90deg, #4fc3f7, #64fdd8);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      opacity: 0;
      transform: translateY(50px);
    }

    body.light-mode .page-title {
      background: linear-gradient(90deg, #2a7de1, #3aa8d8);
      -webkit-background-clip: text;
    }

    /* Table Styles */
    .stocks-table-container {
      width: 100%;
      overflow-x: auto;
      margin: 2rem 0;
      background: linear-gradient(135deg, #1e293b, #0f172a);
      border-radius: 15px;
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
      padding: 20px;
      opacity: 0;
      transform: translateY(50px);
    }

    body.light-mode .stocks-table-container {
      background: linear-gradient(135deg, #ffffff, #e8f0fe);
      box-shadow: 0 15px 30px rgba(42, 125, 225, 0.1);
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th,
    td {
      padding: 15px;
      text-align: left;
      border-bottom: 1px solid rgba(79, 195, 247, 0.2);
    }

    body.light-mode th,
    body.light-mode td {
      border-bottom: 1px solid rgba(42, 125, 225, 0.2);
    }

    th {
      background-color: rgba(79, 195, 247, 0.1);
      color: #4fc3f7;
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.9rem;
      letter-spacing: 0.5px;
    }

    body.light-mode th {
      background-color: rgba(42, 125, 225, 0.1);
      color: #2a7de1;
    }

    tr:hover {
      background-color: rgba(79, 195, 247, 0.05);
    }

    body.light-mode tr:hover {
      background-color: rgba(42, 125, 225, 0.05);
    }

    .positive {
      color: #64fdd8;
      font-weight: 600;
    }

    body.light-mode .positive {
      color: #3aa8d8;
    }

    .negative {
      color: #ff6b6b;
      font-weight: 600;
    }

    a {
      color: #4fc3f7;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.3s;
    }

    body.light-mode a {
      color: #2a7de1;
    }

    a:hover {
      color: #64fdd8;
      text-decoration: underline;
    }

    body.light-mode a:hover {
      color: #3aa8d8;
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .navbar {
        padding: 15px 5%;
      }

      .nav-links {
        display: none;
      }

      .page-title {
        font-size: 2rem;
      }

      th,
      td {
        padding: 12px 8px;
        font-size: 0.9rem;
      }
    }

    @media (max-width: 480px) {
      .page-title {
        font-size: 1.8rem;
      }

      th,
      td {
        padding: 10px 6px;
        font-size: 0.8rem;
      }
    }
    
    .filters-container {
      background: linear-gradient(135deg, #1e293b, #0f172a);
      border-radius: 15px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      padding: 20px;
      margin-bottom: 30px;
      opacity: 0;
      transform: translateY(50px);
    }
    
    body.light-mode .filters-container {
      background: linear-gradient(135deg, #ffffff, #e8f0fe);
      box-shadow: 0 10px 20px rgba(42, 125, 225, 0.1);
    }
    
    .filter-row {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-bottom: 15px;
    }
    
    .filter-group {
      flex: 1;
      min-width: 200px;
    }
    
    .filter-label {
      display: block;
      margin-bottom: 8px;
      font-size: 14px;
      font-weight: 600;
      color: #4fc3f7;
    }
    
    body.light-mode .filter-label {
      color: #2a7de1;
    }
    
    .filter-select, .filter-input {
      width: 100%;
      padding: 10px 15px;
      border-radius: 8px;
      border: 1px solid rgba(79, 195, 247, 0.3);
      background-color: rgba(79, 195, 247, 0.05);
      color: #ffffff;
      font-size: 14px;
    }
    
    body.light-mode .filter-select, 
    body.light-mode .filter-input {
      border: 1px solid rgba(42, 125, 225, 0.3);
      background-color: rgba(42, 125, 225, 0.05);
      color: #333333;
    }
    
    .filter-select:focus, .filter-input:focus {
      outline: none;
      border-color: #4fc3f7;
      box-shadow: 0 0 0 2px rgba(79, 195, 247, 0.2);
    }
    
    body.light-mode .filter-select:focus,
    body.light-mode .filter-input:focus {
      border-color: #2a7de1;
      box-shadow: 0 0 0 2px rgba(42, 125, 225, 0.2);
    }
    
    .filter-buttons {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }
    
    .filter-btn {
      padding: 8px 15px;
      border-radius: 6px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .apply-btn {
      background-color: #4fc3f7;
      color: #0a0e17;
    }
    
    body.light-mode .apply-btn {
      background-color: #2a7de1;
      color: #ffffff;
    }
    
    .apply-btn:hover {
      background-color: #3ab4e6;
      transform: translateY(-2px);
    }
    
    body.light-mode .apply-btn:hover {
      background-color: #1a6bc7;
    }
    
    .reset-btn {
      background-color: transparent;
      color: #4fc3f7;
      border: 1px solid #4fc3f7;
    }
    
    body.light-mode .reset-btn {
      color: #2a7de1;
      border: 1px solid #2a7de1;
    }
    
    .reset-btn:hover {
      background-color: rgba(79, 195, 247, 0.1);
    }
    
    body.light-mode .reset-btn:hover {
      background-color: rgba(42, 125, 225, 0.1);
    }
    
    .range-inputs {
      display: flex;
      gap: 10px;
    }
    
    .range-input {
      flex: 1;
    }
    
    /* Responsive adjustments for filters */
    @media (max-width: 768px) {
      .filter-group {
        min-width: 100%;
      }
      
      .range-inputs {
        flex-direction: column;
        gap: 10px;
      }
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <nav class="navbar">
    <a href="#" class="logo">
      <i class="fas fa-chart-line"></i>StockSense
    </a>
    <div class="nav-links">
      <a href="/home">Home</a>
      <a href="/market">Markets</a>
      <a href="/watchlist">Watchlist</a>
      <a href="Profile">Portfolio</a>
      <a href="/search/stock">Search Stock</a>
      <a href="/home.BSE">BSE Indices</a>
      <a href="/news">News</a>
    </div>
    <div class="auth-buttons">
      <div class="theme-toggle" id="themeToggle">
        <i class="fas fa-moon toggle-icon"></i>
        <span class="toggle-text">Dark Mode</span>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="main-content">
    <h1 class="page-title">NSE Nifty SmallCap Stocks</h1>
    
    <!-- Filters Section -->
   

    <div class="stocks-table-container">
      <table id="stocksTable">
        <thead>
          <tr>
            <th data-sort="symbol">Symbol <i class="fas fa-sort"></i></th>
            <th>Company</th>
            <th data-sort="price">Price (INR) <i class="fas fa-sort"></i></th>
            <th data-sort="change">Change <i class="fas fa-sort"></i></th>
            <th data-sort="changePercent">% Change <i class="fas fa-sort"></i></th>
          </tr>
        </thead>
        <tbody id="stocksTableBody">
          <% stocks.forEach(stock=> { %>
            <tr data-symbol="<%= stock.symbol %>" 
                data-price="<%= stock.price %>" 
                data-change="<%= stock.change %>" 
                data-changePercent="<%= stock.changePercent %>">
              <td><a href="/stock/<%= stock.symbol %>">
                  <%= stock.symbol %>
                </a></td>
              <td>
                <%= stock.shortName %>
              </td>
              <td>
                <%= stock.price.toFixed(2) %>
              </td>
              <td class="<%= stock.change >= 0 ? 'positive' : 'negative' %>">
                <%= stock.change.toFixed(2) %>
              </td>
              <td class="<%= stock.changePercent >= 0 ? 'positive' : 'negative' %>">
                <%= stock.changePercent.toFixed(2) %>%
              </td>
            </tr>
            <% }) %>
        </tbody>
      </table>
    </div>
  </div>

  <script>
    // Theme Toggle Functionality (same as before)
    const themeToggle = document.getElementById('themeToggle');
    const toggleIcon = themeToggle.querySelector('.toggle-icon');
    const toggleText = themeToggle.querySelector('.toggle-text');

    const currentTheme = localStorage.getItem('theme') ||
      (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');

    if (currentTheme === 'light') {
      document.body.classList.add('light-mode');
      toggleIcon.classList.replace('fa-moon', 'fa-sun');
      toggleText.textContent = 'Light Mode';
    }

    themeToggle.addEventListener('click', () => {
      document.body.classList.toggle('light-mode');
      const isLightMode = document.body.classList.contains('light-mode');

      if (isLightMode) {
        toggleIcon.classList.replace('fa-moon', 'fa-sun');
        toggleText.textContent = 'Light Mode';
        localStorage.setItem('theme', 'light');
      } else {
        toggleIcon.classList.replace('fa-sun', 'fa-moon');
        toggleText.textContent = 'Dark Mode';
        localStorage.setItem('theme', 'dark');
      }
    });

    // GSAP Animations (same as before)
    document.addEventListener('DOMContentLoaded', () => {
      gsap.registerPlugin(ScrollTrigger);

      gsap.from('.navbar', {
        y: -100,
        duration: 1,
        ease: 'power3.out'
      });

      gsap.to('.page-title', {
        opacity: 1,
        y: 0,
        duration: 1,
        delay: 0.5
      });

      gsap.to('.filters-container', {
        opacity: 1,
        y: 0,
        duration: 1,
        delay: 0.7
      });

      gsap.to('.stocks-table-container', {
        scrollTrigger: {
          trigger: '.stocks-table-container',
          start: 'top 80%',
          toggleActions: 'play none none none'
        },
        opacity: 1,
        y: 0,
        duration: 1
      });

      gsap.utils.toArray('tbody tr').forEach((row, i) => {
        gsap.from(row, {
          scrollTrigger: {
            trigger: row,
            start: 'top 90%',
            toggleActions: 'play none none none'
          },
          opacity: 0,
          x: -50,
          duration: 0.5,
          delay: i * 0.05
        });
      });

      let lastScroll = 0;
      window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset;
        if (currentScroll <= 0) {
          gsap.to('.navbar', { y: 0, duration: 0.3 });
          return;
        }

        if (currentScroll > lastScroll) {
          gsap.to('.navbar', { y: -100, duration: 0.3 });
        } else {
          gsap.to('.navbar', { y: 0, duration: 0.3 });
        }
        lastScroll = currentScroll;
      });
    });

    // Filtering and Sorting Functionality
    document.addEventListener('DOMContentLoaded', () => {
      const stocksTableBody = document.getElementById('stocksTableBody');
      const applyFiltersBtn = document.getElementById('applyFilters');
      const resetFiltersBtn = document.getElementById('resetFilters');
      const sortBySelect = document.getElementById('sortBy');
      const minPriceInput = document.getElementById('minPrice');
      const maxPriceInput = document.getElementById('maxPrice');
      const minChangePercentInput = document.getElementById('minChangePercent');
      const maxChangePercentInput = document.getElementById('maxChangePercent');
      const performanceFilter = document.getElementById('performanceFilter');
      const tableHeaders = document.querySelectorAll('th[data-sort]');
      
      // Store original rows for reset
      const originalRows = Array.from(stocksTableBody.querySelectorAll('tr'));
      
      // Add sort indicators to table headers
      tableHeaders.forEach(header => {
        header.addEventListener('click', () => {
          const sortKey = header.dataset.sort;
          const isActive = header.classList.contains('active');
          const isAsc = header.classList.contains('asc');
          
          // Reset all headers
          tableHeaders.forEach(h => {
            h.classList.remove('active', 'asc', 'desc');
            h.querySelector('i').className = 'fas fa-sort';
          });
          
          // Set current header state
          header.classList.add('active');
          if (!isActive || isAsc) {
            header.classList.add('desc');
            header.querySelector('i').className = 'fas fa-sort-down';
            sortStocks(sortKey, 'desc');
          } else {
            header.classList.add('asc');
            header.querySelector('i').className = 'fas fa-sort-up';
            sortStocks(sortKey, 'asc');
          }
        });
      });
      
      // Apply filters
      applyFiltersBtn.addEventListener('click', applyFilters);
      
      // Reset filters
      resetFiltersBtn.addEventListener('click', () => {
        // Reset input values
        sortBySelect.value = 'symbol';
        minPriceInput.value = '';
        maxPriceInput.value = '';
        minChangePercentInput.value = '';
        maxChangePercentInput.value = '';
        performanceFilter.value = 'all';
        
        // Reset table headers
        tableHeaders.forEach(header => {
          header.classList.remove('active', 'asc', 'desc');
          header.querySelector('i').className = 'fas fa-sort';
        });
        
        // Restore original order
        stocksTableBody.innerHTML = '';
        originalRows.forEach(row => stocksTableBody.appendChild(row.cloneNode(true)));
      });
      
      function applyFilters() {
        const minPrice = parseFloat(minPriceInput.value) || 0;
        const maxPrice = parseFloat(maxPriceInput.value) || Infinity;
        const minChangePercent = parseFloat(minChangePercentInput.value) || -Infinity;
        const maxChangePercent = parseFloat(maxChangePercentInput.value) || Infinity;
        const performance = performanceFilter.value;
        const sortValue = sortBySelect.value;
        
        let [sortKey, sortDirection] = sortValue.includes('-') ? 
          sortValue.split('-') : [sortValue, 'asc'];
        
        // Filter rows
        const filteredRows = originalRows.filter(row => {
          const price = parseFloat(row.dataset.price);
          const change = parseFloat(row.dataset.change);
          const changePercent = parseFloat(row.dataset.changePercent);
          
          // Price range filter
          if (price < minPrice || price > maxPrice) return false;
          
          // % Change range filter
          if (changePercent < minChangePercent || changePercent > maxChangePercent) return false;
          
          // Performance filter
          switch(performance) {
            case 'gainers':
              return changePercent > 0;
            case 'losers':
              return changePercent < 0;
            case 'high-volatility':
              return Math.abs(changePercent) > 5;
            case 'low-volatility':
              return Math.abs(changePercent) < 2;
            default:
              return true;
          }
        });
        
        // Sort filtered rows
        sortStocks(sortKey, sortDirection, filteredRows);
      }
      
      function sortStocks(key, direction, rowsToSort = null) {
        const rows = rowsToSort || Array.from(stocksTableBody.querySelectorAll('tr'));
        
        rows.sort((a, b) => {
          let valueA, valueB;
          
          switch(key) {
            case 'symbol':
              valueA = a.dataset.symbol.toLowerCase();
              valueB = b.dataset.symbol.toLowerCase();
              return direction === 'asc' ? 
                valueA.localeCompare(valueB) : valueB.localeCompare(valueA);
            case 'price':
              valueA = parseFloat(a.dataset.price);
              valueB = parseFloat(b.dataset.price);
              break;
            case 'change':
              valueA = parseFloat(a.dataset.change);
              valueB = parseFloat(b.dataset.change);
              break;
            case 'changePercent':
              valueA = parseFloat(a.dataset.changePercent);
              valueB = parseFloat(b.dataset.changePercent);
              break;
            default:
              return 0;
          }
          
          return direction === 'asc' ? valueA - valueB : valueB - valueA;
        });
        
        // Update table with sorted rows
        stocksTableBody.innerHTML = '';
        rows.forEach(row => stocksTableBody.appendChild(row));
        
        // Re-animate rows
       gsap.utils.toArray('tbody tr').forEach((row, i) => {
          gsap.from(row, {
            
            y: -10,
            duration: 0.3,
            delay: i * 0.02
          });
        });
      }
      
      // Initialize with default sort
      sortStocks('symbol', 'asc');
    });
  </script>
</body>
</html>